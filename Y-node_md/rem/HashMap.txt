Hashmap
它的底层是数组+链表+红黑树（jdk1.8）
当我们存储kv时，底层会获取key通过hash算法获取它的哈希值，在通过hash和数组的长度来确定数组的下标位，就是确定将kv存放在哪个位置，如果有相同的下标位的就会在该位置形成链表，在链表的尾部插入，当这个链表的长度超过8时就会将链表转化成红黑树，红黑树它是自平衡二叉树，转化的目的也是为了提高查找的效率。

其次，我也去了解了go的hash表，它的底层是数组+链表
其中包含了hmap和bmap,hmap是最外层的数据结构，主要作用计算hash值，定位bmap,以及数组长度，扩容，等等这些。bmap就是确切存储kv的数组，一个bmap可以存储8个kv，然后bmap的kv是排列顺序的，比如有多的kv时,它的存储就是kkvv,如果插入的kv超过8个，就会在该数组后形成链表来存储该kv.

